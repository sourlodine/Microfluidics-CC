.. _user-ic:

Initial conditions
##################

Initial conditions (IC) have to be defined for every Particle Vector

.. comment _udevicex.InitialConditions
   :members:
   :show-inheritance:
   :undoc-members:
   :special-members: __init__ 

.. py:module:: _udevicex.InitialConditions


.. py:class:: InitialConditions
   :module: _udevicex.InitialConditions

   Bases: :class:`pybind11_builtins.pybind11_object`

Base class for initial conditions


.. py:attribute:: InitialConditions.__init__
   :module: _udevicex.InitialConditions

Initialize self.  See help(type(self)) for accurate signature.

.. py:class:: Membrane
   :module: _udevicex.InitialConditions

   Bases: :class:`_udevicex.InitialConditions.InitialConditions`


.. py:method:: Membrane.__init__(self: _udevicex.InitialConditions.Membrane, ic_filename: str, global_scale: float = 1.0) -> None
   :module: _udevicex.InitialConditions

Can only be used with Membrane Object Vector, see :ref:`user-ic`. These IC will initialize the particles of each object
according to the mesh associated with Membrane, and then the objects will be translated/rotated according to the file initial conditions file.

:param ic_filename: Text file describing location and rotation of the created objects.
                    One line in the file corresponds to one object created.
                    Format of the line: *<com_x> <com_y> <com_z>  <q_x> <q_y> <q_z> <q_w>*, where
                    *com* is the center of mass of the object, *q* is the quaternion of its rotation,
                    not necessarily normalized
:param global_scale: All the membranes will be scaled by that value. Useful to implement membranes growth so that they
                     can fill the space with high volume fraction


.. py:class:: Restart
   :module: _udevicex.InitialConditions

   Bases: :class:`_udevicex.InitialConditions.InitialConditions`


.. py:method:: Restart.__init__(self: _udevicex.InitialConditions.Restart, path: str = 'restart/') -> None
   :module: _udevicex.InitialConditions

Read the state (particle coordinates and velocities, other relevant data for objects **not implemented yet**)

:param path: folder where the restart files reside. The exact filename will be like this: <path>/<PV name>.chk


.. py:class:: Rigid
   :module: _udevicex.InitialConditions

   Bases: :class:`_udevicex.InitialConditions.InitialConditions`


.. py:method:: Rigid.__init__(self: _udevicex.InitialConditions.Rigid, ic_filename: str, xyz_filename: str) -> None
   :module: _udevicex.InitialConditions

Can only be used with Rigid Object Vector or Rigid Ellipsoid, see :ref:`user-ic`. These IC will initialize the particles of each object
according to the template .xyz file and then the objects will be translated/rotated according to the file initial conditions file.

:param ic_filename: Text file describing location and rotation of the created objects.
                    One line in the file corresponds to one object created.
                    Format of the line: *<com_x> <com_y> <com_z>  <q_x> <q_y> <q_z> <q_w>*, where
                    *com* is the center of mass of the object, *q* is the quaternion of its rotation,
                    not necessarily normalized
:param xyz_filename: Template that describes the positions of the body particles before translation or
                     rotation is applied. Standard .xyz file format is used with first line being
                     the number of particles, second comment, third and onwards - particle coordinates.
                     The number of particles in the file should be the same as in number of particles per object
                     in the corresponding PV


.. py:class:: Uniform
   :module: _udevicex.InitialConditions

   Bases: :class:`_udevicex.InitialConditions.InitialConditions`


.. py:method:: Uniform.__init__(self: _udevicex.InitialConditions.Uniform, density: float) -> None
   :module: _udevicex.InitialConditions

The particles will be generated with the desired number density uniformly at random in all the domain.
These IC may be used with any Particle Vector, but only make sense for regular PV.

:param density: target density

