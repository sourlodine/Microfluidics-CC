.. _user-interactions:

Interactions
############

Interactions are used to calculate forces on individual particles due to their neighbours.
Pairwise short-range interactions are currently supported, and membrane forces

.. comment _udevicex.Interactions
   :members:
   :show-inheritance:
   :undoc-members:
   :special-members: __init__
      
 

.. py:module:: _udevicex.Interactions


.. py:class:: DPD
   :module: _udevicex.Interactions

   Bases: :class:`_udevicex.Interactions.Interaction`


.. py:method:: DPD.__init__(self: _udevicex.Interactions.DPD, name: str, rc: float, a: float, gamma: float, kbt: float, dt: float, power: float) -> None
   :module: _udevicex.Interactions

Pairwise interaction with conservative part and dissipative + random part acting as a thermostat, see https://aip.scitation.org/doi/abs/10.1063/1.474784

.. math::

    \mathbf{F}_{ij} &= \mathbf{F}^C(\mathbf{r}_{ij}) + \mathbf{F}^D(\mathbf{r}_{ij}, \mathbf{u}_{ij}) + \mathbf{F}^R(\mathbf{r}_{ij}) \\
    \mathbf{F}^C(\mathbf{r}) &= \begin{cases} a(1-\frac{r}{r_c}) \mathbf{\hat r}, & r < r_c \\ 0, & r \geqslant r_c \end{cases} \\
    \mathbf{F}^D(\mathbf{r}, \mathbf{u}) &= \gamma w^2(\frac{r}{r_c}) (\mathbf{r} \cdot \mathbf{u}) \mathbf{\hat r} \\
    \mathbf{F}^R(\mathbf{r}) &= \sigma w(\frac{r}{r_c}) \, \theta \sqrt{\Delta t} \, \mathbf{\hat r}

where bold symbol means a vector, its regular counterpart means vector length:
:math:`x = \left\lVert \mathbf{x} \right\rVert`, hat-ed symbol is the normalized vector:
:math:`\mathbf{\hat x} = \mathbf{x} / \left\lVert \mathbf{x} \right\rVert`. Moreover, :math:`\theta` is the random variable with zero mean
and unit variance, that is distributed independently of the interacting pair *i*-*j*, dissipation and random forces
are related by the fluctuation-dissipation theorem: :math:`\sigma^2 = 2 \gamma \, k_B T`; and :math:`w(r)` is the weight function
that we define as follows:

.. math::

    w(r) = \begin{cases} (1-r)^{p}, & r < 1 \\ 0, & r \geqslant 1 \end{cases}

:param name: name of the interaction
:param rc: interaction cut-off (no forces between particles further than **rc** apart)
:param a: :math:`a`
:param gamma: :math:`\gamma`
:param kbt: :math:`k_B T`
:param dt: time-step, that for consistency has to be the same as the integration time-step for the corresponding particle vectors
:param power: :math:`p` in the weight function


.. py:method:: DPD.setSpecificPair(self: _udevicex.Interactions.DPD, pv1: _udevicex.ParticleVectors.ParticleVector, pv2: _udevicex.ParticleVectors.ParticleVector, a: float, gamma: float, kbt: float, dt: float, power: float) -> None
   :module: _udevicex.Interactions

Override some of the interaction parameters for a specific pair of Particle Vectors


.. py:class:: Interaction
   :module: _udevicex.Interactions

   Bases: :class:`pybind11_builtins.pybind11_object`

hello


.. py:attribute:: Interaction.__init__
   :module: _udevicex.Interactions

Initialize self.  See help(type(self)) for accurate signature.

.. py:class:: LJ
   :module: _udevicex.Interactions

   Bases: :class:`_udevicex.Interactions.Interaction`


.. py:method:: LJ.__init__(self: _udevicex.Interactions.LJ, name: str, rc: float, epsilon: float, sigma: float, max_force: float, object_aware: bool) -> None
   :module: _udevicex.Interactions

Pairwise interaction according to the classical Lennard-Jones potential `http://rspa.royalsocietypublishing.org/content/106/738/463`
The force however is truncated such that it is *always repulsive*.

.. math::

    \mathbf{F}_{ij} = \max \left[ 0.0, 24 \epsilon \left( 2\left( \frac{\sigma}{r_{ij}} \right)^{14} - \left( \frac{\sigma}{r_{ij}} \right)^{8} \right) \right]

:param name: name of the interaction
:param rc: interaction cut-off (no forces between particles further than **rc** apart)
:param epsilon: :math:`\varepsilon`
:param sigma: :math:`\sigma`
:param max_force: force magnitude will be capped not exceed **max_force**
:param object_aware: if True, the particles belonging to the same object in an object vector do not interact with each other.
                     That restriction only applies if both Particle Vectors in the interactions are the same and is actually an Object Vector.


.. py:method:: LJ.setSpecificPair(self: _udevicex.Interactions.LJ, pv1: _udevicex.ParticleVectors.ParticleVector, pv2: _udevicex.ParticleVectors.ParticleVector, epsilon: float, sigma: float, maxForce: float) -> None
   :module: _udevicex.Interactions

Override some of the interaction parameters for a specific pair of Particle Vectors


.. py:class:: MembraneForces
   :module: _udevicex.Interactions

   Bases: :class:`_udevicex.Interactions.Interaction`


.. py:method:: MembraneForces.__init__(self: _udevicex.Interactions.MembraneForces, name: str, params: _udevicex.Interactions.MembraneParameters, stressFree: bool, growUntilTime: float = 0) -> None
   :module: _udevicex.Interactions

Mesh-based forces acting on a membrane according to the model in LINK


.. py:class:: MembraneParameters
   :module: _udevicex.Interactions

   Bases: :class:`pybind11_builtins.pybind11_object`


.. py:method:: MembraneParameters.__init__(self: _udevicex.Interactions.MembraneParameters) -> None
   :module: _udevicex.Interactions

Structure keeping parameters of the membrane interaction


.. py:attribute:: MembraneParameters.gammaC
   :module: _udevicex.Interactions


.. py:attribute:: MembraneParameters.gammaT
   :module: _udevicex.Interactions


.. py:attribute:: MembraneParameters.ka
   :module: _udevicex.Interactions


.. py:attribute:: MembraneParameters.kb
   :module: _udevicex.Interactions


.. py:attribute:: MembraneParameters.kbT
   :module: _udevicex.Interactions


.. py:attribute:: MembraneParameters.kd
   :module: _udevicex.Interactions


.. py:attribute:: MembraneParameters.kv
   :module: _udevicex.Interactions


.. py:attribute:: MembraneParameters.mpow
   :module: _udevicex.Interactions


.. py:attribute:: MembraneParameters.p
   :module: _udevicex.Interactions


.. py:attribute:: MembraneParameters.theta
   :module: _udevicex.Interactions


.. py:attribute:: MembraneParameters.totArea
   :module: _udevicex.Interactions


.. py:attribute:: MembraneParameters.totVolume
   :module: _udevicex.Interactions


.. py:attribute:: MembraneParameters.x0
   :module: _udevicex.Interactions

