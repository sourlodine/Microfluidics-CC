.. _user-integrators:

Integrators
###########

Integrators are used to advance particle coordinates and velocities in time according to forces acting on them.

.. note:
   For now all the integrators in the simulation must use the same timestep

.. comment libudevicex.Integrators
   :members:
   :show-inheritance:
   :undoc-members:
   :special-members: __init__
      
 

.. py:module:: libudevicex.Integrators


.. py:class:: Integrator
   :module: libudevicex.Integrators

   Bases: :class:`pybind11_builtins.pybind11_object`

Base integration class


.. py:attribute:: Integrator.__init__
   :module: libudevicex.Integrators

Initialize self.  See help(type(self)) for accurate signature.

.. py:class:: Oscillate
   :module: libudevicex.Integrators

   Bases: :class:`libudevicex.Integrators.Integrator`

Move particles with the periodically changing velocity
:math:`\mathbf{u}(t) = \cos(2 \pi \, t / T) \mathbf{u}_0`


.. py:method:: Oscillate.__init__(self: libudevicex.Integrators.Oscillate, name: str, dt: float, velocity: Tuple[float, float, float], period: float) -> None
   :module: libudevicex.Integrators

:param name: name of the integrator
:param dt: integration time-step
:param velocity: :math:`\mathbf{u}_0`
:param period: oscillation period :math:`T`


.. py:class:: RigidVelocityVerlet
   :module: libudevicex.Integrators

   Bases: :class:`libudevicex.Integrators.Integrator`

Integrate the position and rotation (in terms of quaternions) of the rigid bodies as per Velocity-Verlet scheme.
Can only applied to :any:`RigidObjectVector` or :any:`RigidEllipsoidVector`.


.. py:method:: RigidVelocityVerlet.__init__(self: libudevicex.Integrators.RigidVelocityVerlet, name: str, dt: float) -> None
   :module: libudevicex.Integrators

:param name: name of the integrator
:param dt: integration time-step


.. py:class:: Rotate
   :module: libudevicex.Integrators

   Bases: :class:`libudevicex.Integrators.Integrator`

Rotate particles around the specified point in space with a constant angular velocity :math:`\mathbf{\Omega}`


.. py:method:: Rotate.__init__(self: libudevicex.Integrators.Rotate, name: str, dt: float, center: Tuple[float, float, float], omega: Tuple[float, float, float]) -> None
   :module: libudevicex.Integrators

:param name: name of the integrator
:param dt: integration time-step
:param center: point around which to rotate
:param omega: angular velocity :math:`\mathbf{\Omega}`


.. py:class:: Translate
   :module: libudevicex.Integrators

   Bases: :class:`libudevicex.Integrators.Integrator`

Translate particles with a constant velocity :math:`\mathbf{u}` regardless forces acting on them.


.. py:method:: Translate.__init__(self: libudevicex.Integrators.Translate, name: str, dt: float, velocity: Tuple[float, float, float]) -> None
   :module: libudevicex.Integrators

:param name: name of the integrator
:param dt: integration time-step
:param velocity: translational velocity :math:`\mathbf{\Omega}`


.. py:class:: VelocityVerlet
   :module: libudevicex.Integrators

   Bases: :class:`libudevicex.Integrators.Integrator`

Classical Velocity-Verlet integrator with fused steps for coordinates and velocities.
The velocities are shifted with respect to the coordinates by one half of the time-step

.. math::

    \mathbf{a}^{n} &= \frac{1}{m} \mathbf{F}(\mathbf{x}^{n}, \mathbf{v}^{n-1/2}) \\
    \mathbf{v}^{n+1/2} &= \mathbf{v}^{n-1/2} + \mathbf{a}^n \Delta t \\
    \mathbf{x}^{n+1} &= \mathbf{x}^{n} + \mathbf{v}^{n+1/2} \Delta t

where bold symbol means a vector, :math:`m` is a particle mass, and superscripts denote the time: :math:`\mathbf{x}^{k} = \mathbf{x}(k \, \Delta t)`


.. py:method:: VelocityVerlet.__init__(self: libudevicex.Integrators.VelocityVerlet, name: str, dt: float) -> None
   :module: libudevicex.Integrators

:param name: name of the integrator
:param dt: integration time-step


.. py:class:: VelocityVerlet_withConstForce
   :module: libudevicex.Integrators

   Bases: :class:`libudevicex.Integrators.Integrator`

Same as regular :any:`VelocityVerlet`, but the forces on all the particles are modified with the constant pressure term:

.. math::

    \mathbf{a}^{n} &= \frac{1}{m} \left( \mathbf{F}(\mathbf{x}^{n}, \mathbf{v}^{n-1/2}) + \mathbf{F}_{extra} \right) \\


.. py:method:: VelocityVerlet_withConstForce.__init__(self: libudevicex.Integrators.VelocityVerlet_withConstForce, name: str, dt: float, force: Tuple[float, float, float]) -> None
   :module: libudevicex.Integrators

:param name: name of the integrator
:param dt: integration time-step
:param force: :math:`\mathbf{F}_{extra}`


.. py:class:: VelocityVerlet_withPeriodicForce
   :module: libudevicex.Integrators

   Bases: :class:`libudevicex.Integrators.Integrator`

Same as regular Velocity-Verlet, but the forces on all the particles are modified with periodic Poiseuille term.
This means that all the particles in half domain along certain axis (Ox, Oy or Oz) are pushed with force
:math:`F_{Poiseuille}` parallel to Oy, Oz or Ox correspondingly, and the particles in another half of the domain are pushed in the same direction
with force :math:`-F_{Poiseuille}`


.. py:method:: VelocityVerlet_withPeriodicForce.__init__(self: libudevicex.Integrators.VelocityVerlet_withPeriodicForce, name: str, dt: float, force: float, direction: str) -> None
   :module: libudevicex.Integrators

:param name: name of the integrator
:param dt: integration time-step
:param force: force magnitude, :math:`F_{Poiseuille}`
:param direction: Valid values: \"x\", \"y\", \"z\". Defines the direction of the pushing force

